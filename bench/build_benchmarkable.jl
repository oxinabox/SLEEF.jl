pkgdir = Pkg.dir("SLEEF")
libext = is_linux() ? ".so" :
		 is_apple()  ? ".dynlib" :
		 is_windows() ? ".dll" : error("OS couldn't be determined")
lib_dir = joinpath(pkgdir, "deps","usr","lib")


cp(joinpath(pkgdir, "deps"), joinpath(pkgdir, "_deps"); remove_destination=true)

try
	for arch in ["sse2", "avx", "avx2", "fma4", "purec"]
		println("-"^38)
		println("Building for $arch")
		println()
		

		rm(joinpath(pkgdir, "deps", "src"); force=true, recursive=true)    #Git rid of any compiled files (except the lib)
		rm(joinpath(lib_dir, "sleef"*libext); force=true) #get rid of old one so it rebuilds


		ENV["JLSLEEF_ARCH"] = arch
		buildscriptpath = joinpath(pkgdir, "deps", "build.jl")
		julia = joinpath(JULIA_HOME, "julia") #Deal with julia under aliases
		run(`$julia $buildscriptpath`)
	

		lib_path = joinpath(splitdir(@__FILE__)[1], "usr", "lib", arch*"_sleef"*libext)
		mv(joinpath(lib_dir,"sleef"*libext), lib_path)
		

		sleef_inner_path = joinpath(pkgdir,"src", "sleef_inner.jl")

		module_name = "SLEEF_"*arch
		#module_path = joinpath(pkgdir,"src", module_name*".jl")
		module_path = joinpath(splitdir(@__FILE__)[1], "arch_modules", module_name*".jl")

		open(module_path, "w") do fp
			println(fp, """
module $(module_name)
# This is a AutoGenerated file. Do not edit directly. Generated by $(@__FILE__)

# Macro to load a library
macro checked_lib(libname, path)
	((VERSION >= v"0.4.0-dev+3844" ? Base.Libdl.dlopen_e : Base.dlopen_e)(path) == C_NULL) && error("Unable to load \n\n\$libname (\$path)\n\nPlease re-run Pkg.build(package), and restart Julia.")
	quote const \$(esc(libname)) = \$path end
end

# Load dependencies
@checked_lib jl_sleef "$(lib_path)"

# Load-hooks


const SIMD_ARCH = "$arch"

include(\"$(sleef_inner_path)\")


end #module
""")
		end

	end
	println("Done")

finally
	rm(joinpath(pkgdir, "deps"); force=true, recursive=true)
	cp(joinpath(pkgdir, "_deps"), joinpath(pkgdir, "deps"); remove_destination=true)

	println("Deps restored")
end
